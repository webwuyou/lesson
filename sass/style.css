@charset "UTF-8";
body {
  font-size: 14px; }

ul li a {
  color: #000; }

p {
  color: #000; }

span {
  color: #000; }

div {
  color: #fff; }

em {
  color: #000; }

/*选择器嵌套*/
header a {
  color: #000;
  font-size: 24px;
  font-weight: bold; }
header nav a {
  text-decoration: none;
  font-size: 14px;
  color: #f00; }

/*属性嵌套*/
.box {
  border-top: 1px solid #000;
  border-bottom: 2px solid #f00;
  font-size: 24px;
  font-weight: bold;
  font-family: "aril"; }

/*伪类嵌套*/
/*伪类嵌套需要借助&*/
.clearfix:before, .clearfix:after {
  content: "";
  display: table; }
.clearfix:after {
  clear: both;
  overflow: hidden; }

a:hover {
  color: #f00; }

a:hover {
  color: blue; }

/*声明混合宏*/
/*1、不带参数混合宏*/
/*2、不带值的参数混合宏*/
/*3、带参数和默认值的混合宏*/
/*4、带多个参数*/
.radius1 {
  border-radius: 5px;
  -webkit-border-radius: 5px;
  -moz-border-radius: 5px; }

.radius {
  border-radius: 10px;
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px; }

.radius3 {
  border-radius: 10px;
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px; }

.radius4 {
  border-radius: 20px;
  -webkit-border-radius: 20px;
  -moz-border-radius: 20px; }

.radius5 {
  border-radius: 10px;
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px; }

.box-center {
  width: 500px;
  height: 400px;
  position: absolute;
  top: 50%;
  left: 50%;
  margin-left: -250px;
  margin-top: -200px; }

.box-center2 {
  width: 300px;
  height: 200px;
  position: absolute;
  top: 50%;
  left: 50%;
  margin-left: -150px;
  margin-top: -100px; }

/*混合宏的不足*/
/*会生成冗余的代码块*/
/*在不同的地方调用一个相同的混合宏时，并不能智能的将相同的样式代码块合并在一起*/
.btn1 {
  box-shadow: 10px 10px 5px #ddd;
  border-radius: 5px;
  margin-bottom: 5px; }

.btn2 {
  box-shadow: 10px 10px 5px #ddd;
  border-radius: 5px; }

/*拓展/继承*/
.btn, .btn-default, .btn-primary, .btn-success, .btn-info, .btn-warning, .btn-danger {
  border: 1px solid #ddd;
  padding: 6px 12px;
  font-size: 14px;
  line-height: bold;
  color: #fff;
  display: inline-block;
  border-radius: 10px;
  -webkit-border-radius: 10px;
  -moz-border-radius: 10px; }

.btn-default {
  background: #fff;
  color: #333; }

.btn-primary {
  background: #428bca; }

.btn-success {
  background: #5cb85c; }

.btn-info {
  background: #5bc0de; }

.btn-warning {
  background: #f0ad4e; }

.btn-danger {
  background: #d9534f; }

/*占位符%*/
/*占位符%声明的代码如果不被extend调用的话，不会编译出来产生任何代码*/
/*并且通过extend调用以后，编译出来后相同的代码会合并在一起，让您的代码更简洁*/
.mt, .mt2 {
  margin-top: 5px; }

.mt, .mt2 .mt3 {
  padding-top: 5px; }

/*混合宏VS继承VS占位符*/
/*1、在多个地方引用同一个混合宏，不会自动合并相同的样式代码，造成代码冗余。优点是可以传递参数。如果代码块中涉及到变量，建议使用混合宏。*/
/*2、使用继承，编译出来的css会将继承的代码块合并，通过组合选择器的方式展现，但是不能传递参数。如果代码块不需要任何变量参数，而且已经存在一个基类，建议使用继承。*/
/*3、编译出来的代码和使用继承基本相同，只是不会生成占位符的选择器。区别，占位符是独立的，不调用的时候不会在css中产生任何代码；继承是首先有一个基类存在，不管调不调用，基类的样式都会出现在css文件中。*/
/*sass注释*/
/*1、类似css的注释，使用/*。编译出来后可以在css中显示
/*2、类似JavaScript的注释，使用//。编译后在css中不会显示*/
.zhushi1, .zhushi2, .zhushi2 p, .zhushi2 span {
  margin-top: 10px; }

.zhushi1 {
  padding-top: 10px; }

.zhushi2 p {
  color: #f00; }
.zhushi2 span {
  display: inline-block; }

nav {
  font-size: 16px; }
  nav ul {
    margin: 0;
    padding: 0;
    list-style: none; }
  nav li {
    display: inline-block; }
  nav a {
    display: block;
    padding: 6px 12px;
    text-decoration: none; }

/*# sourceMappingURL=style.css.map */
