@charset "UTF-8";
$fontSize:14px;
$fontSize:12px !default;
$color:#000;
body{
	font-size: $fontSize;
}
ul li a{color: $color}
p{color: $color}
span{color: $color}
div{$color:#fff;color: $color}
em{color: $color}


/*选择器嵌套*/
header{
	a{
		color:#000;
		font-size: 24px;
		font-weight: bold;
	}
	nav a{text-decoration: none;font-size: 14px;color: #f00}
}

/*属性嵌套*/
.box{
	border:{
		top:1px solid #000;
		bottom:2px solid #f00;
	}
	font:{
		size:24px;
		weight:bold;
		family:"aril";
	}

}

/*伪类嵌套*/
/*伪类嵌套需要借助&*/
.clearfix{
	&:before,
	&:after{
		content:"";
		display:table;
	}
	&:after{
		clear:both;
		overflow: hidden;
	};
}
a:hover{color: #f00}
a{
	&:hover{
		color:blue;
	};
}

/*声明混合宏*/

/*1、不带参数混合宏*/

@mixin border-radius1{
border-radius: 5px;
-webkit-border-radius:5px;
-moz-border-radius:5px;
}

/*2、不带值的参数混合宏*/
@mixin border-radius2($width){
	border-radius: $width;
	-webkit-border-radius:$width;
	-moz-border-radius:$width;
}

/*3、带参数和默认值的混合宏*/
@mixin border-radius3($width:10px){
	border-radius: $width;
	-webkit-border-radius: $width;
	-moz-border-radius: $width;
};

/*4、带多个参数*/
@mixin center($width,$height){
	width: $width;
	height: $height;
	position: absolute;
	top: 50%;
	left: 50%;
	margin-left: -$width/2;
	margin-top: -$height/2;
}

.radius1{
	@include border-radius1;
}
.radius{
	@include border-radius2(10px);
}
.radius3{
	@include border-radius3;
}

.radius4{
	@include border-radius3(20px);
}
.radius5{
	@include border-radius3();
}
.box-center{
	@include center(500px,400px);
}
.box-center2{
	@include center(300px,200px);
}


/*混合宏的不足*/
/*会生成冗余的代码块*/
/*在不同的地方调用一个相同的混合宏时，并不能智能的将相同的样式代码块合并在一起*/
@mixin box-shadow{
	box-shadow: 10px 10px 5px #ddd;
	border-radius: 5px;

}

.btn1{
	@include box-shadow;
	margin-bottom: 5px;
}
.btn2{
	@include box-shadow
}




/*拓展/继承*/
.btn{
	border: 1px solid #ddd;
	padding: 6px 12px;
	font-size: 14px;
	line-height: bold;
	color: #fff;display: inline-block;
	@include border-radius3;
}
.btn-default{
	background: #fff;
	@extend .btn;
	color: #333;
}
.btn-primary{
	@extend .btn;
	background: #428bca;
}
.btn-success{
	background: #5cb85c;
	@extend .btn;
}
.btn-info{
	background: #5bc0de;
	@extend .btn;
}
.btn-warning{
	background: #f0ad4e;
	@extend .btn;
}
.btn-danger{
	background: #d9534f;
	@extend .btn;
}





/*占位符%*/
/*占位符%声明的代码如果不被extend调用的话，不会编译出来产生任何代码*/
/*并且通过extend调用以后，编译出来后相同的代码会合并在一起，让您的代码更简洁*/
%mt5{
	margin-top: 5px;
}
%pt5{
	padding-top: 5px;
}
.mt{
	@extend %mt5;
	@extend %pt5;
}
.mt2{
	@extend %mt5;
	.mt3{
		@extend %pt5;
	}
}


/*混合宏VS继承VS占位符*/
/*1、在多个地方引用同一个混合宏，不会自动合并相同的样式代码，造成代码冗余。优点是可以传递参数。如果代码块中涉及到变量，建议使用混合宏。*/
/*2、使用继承，编译出来的css会将继承的代码块合并，通过组合选择器的方式展现，但是不能传递参数。如果代码块不需要任何变量参数，而且已经存在一个基类，建议使用继承。*/
/*3、编译出来的代码和使用继承基本相同，只是不会生成占位符的选择器。区别，占位符是独立的，不调用的时候不会在css中产生任何代码；继承是首先有一个基类存在，不管调不调用，基类的样式都会出现在css文件中。*/